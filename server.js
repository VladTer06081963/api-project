const express = require('express');
const path = require('path');
const helmet = require('helmet');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const morgan = require('morgan');

const app = express();
const routes = require('./routes1');
const PORT = process.env.PORT || 3000;

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: Helmet –¥–ª—è –∑–∞—â–∏—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è HTMX
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            scriptSrc: ["'self'", "'unsafe-inline'", "unpkg.com"],
            styleSrc: ["'self'", "'unsafe-inline'"],
            imgSrc: ["'self'", "data:", "https:"],
            connectSrc: ["'self'"]
        }
    }
}));

// CORS: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(cors({
    origin: 'http://localhost:3000',
    methods: ['GET', 'POST'],
    credentials: true
}));

// Rate limiting: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ 15 –º–∏–Ω—É—Ç —Å –æ–¥–Ω–æ–≥–æ IP
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    max: 100, // –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
});
app.use(limiter);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: Morgan –¥–ª—è HTTP –ª–æ–≥–æ–≤
app.use(morgan('combined'));

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json());

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL-encoded –¥–∞–Ω–Ω—ã—Ö
app.use(express.urlencoded({ extended: true }));

// Middleware –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
app.use(express.static(path.join(__dirname, 'public'), {
    // maxAge: '1y'
 // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 1 –≥–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
}));

// API —Ä–æ—É—Ç—ã
app.use('/api', routes);

// HTML-—Ä–æ—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–ª—è htmx)
app.get('/htmx/', (req, res) => {
    res.send(`
        <h4>–û—Ç–≤–µ—Ç –æ—Ç /:</h4>
        <pre>{
  "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Express —Å–µ—Ä–≤–µ—Ä!",
  "status": "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
  "timestamp": "${new Date().toISOString()}",
  "version": "1.0.0"
}</pre>
        <p><strong>HTTP Status:</strong> 200</p>
    `);
});

// HTML-—Ä–æ—É—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è htmx)
app.get('/htmx/status', (req, res) => {
    const uptime = process.uptime();
    const memory = process.memoryUsage();
    res.send(`
        <h4>–û—Ç–≤–µ—Ç –æ—Ç /status:</h4>
        <pre>{
  "status": "OK",
  "uptime": ${uptime},
  "memory": {
    "rss": ${memory.rss},
    "heapTotal": ${memory.heapTotal},
    "heapUsed": ${memory.heapUsed},
    "external": ${memory.external}
  },
  "timestamp": "${new Date().toISOString()}"
}</pre>
        <p><strong>HTTP Status:</strong> 200</p>
    `);
});

// HTML-—Ä–æ—É—Ç –¥–ª—è API hello (–¥–ª—è htmx)
app.get('/htmx/api/hello', (req, res) => {
    res.send(`
        <h4>–û—Ç–≤–µ—Ç –æ—Ç /api/hello:</h4>
        <pre>{
  "message": "–ü—Ä–∏–≤–µ—Ç –æ—Ç Express API!",
  "data": {
    "name": "Express Server",
    "version": "1.0.0"
  }
}</pre>
        <p><strong>HTTP Status:</strong> 200</p>
    `);
});

// HTML-—Ä–æ—É—Ç –¥–ª—è 404 –æ—à–∏–±–∫–∏ (–¥–ª—è htmx)
app.get('/htmx/nonexistent', (req, res) => {
    res.status(200).send(`
        <h4>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ /nonexistent:</h4>
        <pre>{
  "error": "–†–æ—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
  "message": "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ /htmx/nonexistent",
  "availableRoutes": ["/api/", "/api/status", "/api/hello", "/api/info/port", "/api/info/status", "/api/info/uptime", "/htmx/", "/htmx/status", "/htmx/api/hello"]
}</pre>
        <p><strong>HTTP Status:</strong> 404</p>
    `);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use((req, res) => {
    res.status(404).json({
        error: '–†–æ—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        message: `–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ ${req.originalUrl}`,
        availableRoutes: ['/api/', '/api/status', '/api/hello', '/api/info/port', '/api/info/status', '/api/info/uptime', '/htmx/', '/htmx/status', '/htmx/api/hello']
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: err.message
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É http://localhost:${PORT}`);
    console.log(`üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ—É—Ç—ã:`);
    console.log(`   GET  / - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π index.html)`);
    console.log(`   GET  /api/ - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (JSON)`);
    console.log(`   GET  /api/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ (JSON)`);
    console.log(`   GET  /api/hello - –ü—Ä–∏–º–µ—Ä API (JSON)`);
    console.log(`   GET  /api/info/port - –¢–µ–∫—É—â–∏–π –ø–æ—Ä—Ç (JSON)`);
    console.log(`   GET  /api/info/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ (JSON)`);
    console.log(`   GET  /api/info/uptime - –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (JSON)`);
    console.log(`   GET  /htmx/ - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (HTML)`);
    console.log(`   GET  /htmx/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ (HTML)`);
    console.log(`   GET  /htmx/api/hello - –ü—Ä–∏–º–µ—Ä API (HTML)`);
    console.log(`   GET  /htmx/nonexistent - –¢–µ—Å—Ç 404 (HTML)`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', () => {
    console.log('üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
    process.exit(0);
});

module.exports = app;
